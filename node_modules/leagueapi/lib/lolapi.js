/*global require*/
/*global module*/
/*global console*/
/*jslint nomen: true*/

(function () {

    'use strict';

    var League = {},
        util = require('./util'),
        authKey,
        region = 'euw1',
        endpoint = 'api.riotgames.com/lol',
        championUrl = '/platform/v3/champions',
        championMasteryUrl = {
            championmasteries: '/champion-mastery/v3/champion-masteries/by-summoner/',
            scores: '/champion-mastery/v3/scores/by-summoner/'
        },
        leagueUrl = {
            challengerleagues: '/league/v3/challengerleagues/by-queue/',
            leagues: '/league/v3/leagues/by-summoner/',
            masterleagues: '/league/v3/masterleagues/by-queue/',
            positions: '/league/v3/positions/by-summoner/'
        },
        masteriesUrl = '/platform/v3/masteries/by-summoner/',
        runesUrl = '/platform/v3/runes/by-summoner/',
        statusUrl = '/status/v3/shard-data',
        summonerUrl = {
            account: '/summoner/v3/summoners/by-account/',
            name: '/summoner/v3/summoners/by-name/',
            summoner: '/summoner/v3/summoners/'
        },
        spectatorUrl = {
            activegames: '/spectator/v3/active-games/by-summoner/',
            featuredgames: '/spectator/v3/featured-games'
        },
        matchUrl = {
            matches: '/match/v3/matches/',
            matchlists: '/match/v3/matchlists/by-account/',
            timelines: '/match/v3/timelines/by-match/',
            tournament: '/match/v3/matches/by-tournament-code/',
        },
        staticUrl = {
            champions: '/static-data/v3/champions',
            items: '/static-data/v3/items',
            languageStr: '/static-data/v3/language-strings',
            languages: '/static-data/v3/languages',
            maps: '/static-data/v3/maps',
            masteries: '/static-data/v3/masteries',
            profileIcons: '/static-data/v3/profile-icons',
            realms: '/static-data/v3/realms',
            runes: '/static-data/v3/runes',
            spells: '/static-data/v3/summoner-spells',
            versions: '/static-data/v3/versions',
        },
        tournamentStubUrl = {
            codes: '/tournament-stub/v3/codes',
            lobbyevents: '/tournament-stub/v3/lobby-events/by-code/',
            providers: '/tournament-stub/v3/providers',
            tournaments: '/tournament-stub/v3/tournaments'
        },
        tournamentUrl = {
            codes: '/tournament/v3/codes',
            lobbyevents: '/tournament/v3/lobby-events/by-code/',
            providers: '/tournament/v3/providers',
            tournaments: '/tournament/v3/tournaments',
        }

    League.ChampionMastery = {};

    League.Champion = {};

    League.League = {};

    League.Static = {};

    League.Status = {};

    League.Masteries = {};

    League.Match = {};

    League.Runes = {};

    League.Spectator = {};

    League.Summoner = {};

    League.TournamentStub = {};
    
    League.Tournament = {};

    League.init = function (key, regionTag) {
        authKey = key;
        if (regionTag) {
            region = regionTag;
        }
    };

    // GET QUEUES
    League.getQueues = function (callback) {
        var queues = {
            0: 'Custom',
            2: 'Normal 5v5 Blind Pick',
            4: 'Ranked Solo 5v5',
            6: 'Ranked Premade 5v5',
            7: 'Coop vs AI 5v5',
            8: 'Normal 3v3',
            9: 'Ranked Premade 3v3 and current Ranked Flex Twisted Treeline',
            14: 'Normal 5v5 Draft Pick',
            16: 'Dominion 5v5 Blind Pick',
            17: 'Dominion 5v5 Draft Pick',
            25: 'Dominion Coop vs AI',
            31: 'Summoner\'s Rift Coop vs AI Intro Bot',
            32: 'Summoner\'s Rift Coop vs AI Beginner Bot',
            33: 'Historical Summoner\'s Rift Coop vs AI Intermediate Bot',
            41: 'Ranked Team 3v3',
            42: 'Ranked Team 5v5',
            52: 'Twisted Treeline Coop vs AI',
            61: 'Team Builder',
            65: 'ARAM',
            67: 'ARAM Coop vs AI',
            70: 'One for All',
            72: 'Snowdown Showdown 1v1',
            73: 'Snowdown Showdown 2v2',
            75: 'Summoner\'s Rift 6x6 Hexakill',
            76: 'Ultra Rapid Fire',
            78: 'One for All (Mirror mode)',
            83: 'Ultra Rapid Fire played against AI',
            91: 'Doom Bots Rank 1',
            92: 'Doom Bots Rank 2',
            96: 'Ascension',
            98: 'Twisted Treeline 6x6 Hexakill',
            100: 'Butcher\'s Bridge',
            300: 'King Poro',
            310: 'Nemesis',
            313: 'Black Market Brawlers',
            315: 'Nexus Siege',
            317: 'Definitely Not Dominion',
            318: 'All Random URF',
            325: 'All Random Summoner\'s Rift',
            400: 'Normal 5v5 Draft Pick',
            410: 'Ranked 5v5 Draft Pick',
            420: 'Ranked Solo/Duo 5v5',
            430: 'Normal 5v5 Blind Pick',
            440: 'Ranked Flex Summoner\'s Rift',
            600: 'Blood Hunt Assassin',
            610: 'Dark Star'
        };
        return util.makeStaticRequest(null, queues);
    };

    //GET MAP NAMES
    League.getMapNames = function (callback) {
        var maps ={
            1: 'Summoner\'s Rift Summer Variant ',
            2: 'Summoner\'s Rift Autumn Variant',
            3: 'The Proving Grounds',
            4: 'Twisted Treeline Original Version',
            8: 'The Crystal Scar',
            10: 'Twisted Treeline Current Version',
            11: 'Summoner\'s Rift Current Version',
            12: 'Howling Abyss',
            14: 'Butcher\'s Bridge',
            16: 'Cosmic Ruins'
        };
        return util.makeStaticRequest(null, maps);
    };

    // UPDATED VERSION V3
    League.ChampionMastery.getChampions = function(summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback)
        var url = util.craftUrl(endpoint, regionAndFunc.region, championMasteryUrl.championmasteries + summonerId + '?', authKey);
            
        return util.makeRequest(url, 'Error getting champion mastery champions: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.ChampionMastery.getChampion = function(summonerId, championId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback)
        var url = util.craftUrl(endpoint, regionAndFunc.region, championMasteryUrl.championmasteries + summonerId + '/by-champion/' + championId + '?', authKey);
        return util.makeRequest(url, 'Error getting champion mastery champions: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.ChampionMastery.getScore = function(summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback)
        var url = util.craftUrl(endpoint, regionAndFunc.region, championMasteryUrl.scores + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting champion mastery champions: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Champion.getChampions = function (freeToPlay, regionOrFunction, callback) {
        var freetoPlayQuery = '',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);

        if (freeToPlay) {
            freetoPlayQuery = 'freeToPlay=true&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, championUrl + '?' + freetoPlayQuery, authKey);
        return util.makeRequest(url, 'Error getting champions: ', 'champions', regionAndFunc.callback);
    };
    
    // UPDATED VERSION V3
    League.Champion.getChampionById = function (championId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, championUrl + '/' + championId + '?', authKey);
        return util.makeRequest(url, 'Error getting champion by id: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.League.getChallengerLeagues = function (queue, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, leagueUrl.challengerleagues + queue + '?', authKey);
        return util.makeRequest(url, 'Error getting challenger league data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.League.getLeagueData = function (summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, leagueUrl.leagues + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting league data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.League.getMasterLeagues = function(queue, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, leagueUrl.masterleagues + queue + '?', authKey);
        return util.makeRequest(url, 'Error getting master league data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.League.getPositions = function (summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, leagueUrl.positions + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting positions data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getChampionList = function(options, regionOrFunction, callback) {
        var championListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);

        if(options) {
            if (options.tags) {
                championListUrl += '&tags=' + options.tags;
            }

            if (options.dataById) {
                championListUrl += '&dataById=true';
            }

            if (options.version) {
                championListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                championListUrl += '&locale=' + options.locale;
            }
            championListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.champions + championListUrl, authKey);
        return util.makeRequest(url, 'Error getting static champion list: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getChampionById = function(id, options, regionOrFunction, callback) {
        var championListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);

        if(options) {
            if (options.tags) {
                championListUrl += '&tags=' + options.tags;
            }

            if (options.dataById) {
                championListUrl += '&dataById=true';
            }

            if (options.version) {
                championListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                championListUrl += '&locale=' + options.locale;
            }
            championListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.champions + "/" + id + championListUrl, authKey);
        return util.makeRequest(url, 'Error getting static champion by id: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getItemList = function(options, regionOrFunction, callback) {
        var itemListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                itemListUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                itemListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                itemListUrl += '&locale=' + options.locale;
            }
            itemListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.items + itemListUrl, authKey);
        return util.makeRequest(url, 'Error getting static item list: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getItemById = function(id, options, regionOrFunction, callback) {
        var itemListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                itemListUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                itemListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                itemListUrl += '&locale=' + options.locale;
            }
            itemListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.items + "/" + id + itemListUrl, authKey);
        return util.makeRequest(url, 'Error getting static item by id: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getLanguageStrings = function(options, regionOrFunction, callback) {
        var languageListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.version) {
                languageListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                languageListUrl += '&locale=' + options.locale;
            }
            languageListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.languageStr + languageListUrl, authKey);
        return util.makeRequest(url, 'Error getting static language-strings list: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getLanguages = function(regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.languages + "?", authKey);
        return util.makeRequest(url, 'Error getting static languages list: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getMaps = function(options, regionOrFunction, callback) {
        var mapsListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.version) {
                mapsListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                mapsListUrl += '&locale=' + options.locale;
            }
            mapsListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.maps + mapsListUrl, authKey);
        return util.makeRequest(url, 'Error getting static maps list: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getMasteryList = function(options, regionOrFunction, callback) {
        var masteryListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                masteryListUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                masteryListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                masteryListUrl += '&locale=' + options.locale;
            }
            masteryListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.masteries + masteryListUrl, authKey);
        return util.makeRequest(url, 'Error getting mastery list : ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getMasteryById = function(id, options, regionOrFunction, callback) {
        var masteryIdUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                masteryIdUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                masteryIdUrl += '&version=' + options.version;
            }

            if (options.locale) {
                masteryIdUrl += '&locale=' + options.locale;
            }
            masteryIdUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.masteries + "/" + id + masteryIdUrl, authKey);
        return util.makeRequest(url, 'Error getting mastery by id: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getProfileIcons = function(options, regionOrFunction, callback) {
        var profileIconsListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.version) {
                profileIconsListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                profileIconsListUrl += '&locale=' + options.locale;
            }
            profileIconsListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.profileIcons + profileIconsListUrl, authKey);
        return util.makeRequest(url, 'Error getting static profile icons list: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getRealm = function(regionOrFunction, callback) {        
        var realmUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.realms + "?", authKey);
        return util.makeRequest(url, 'Error getting realm: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getRuneList = function(options, regionOrFunction, callback) {
        var runeListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                runeListUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                runeListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                runeListUrl += '&locale=' + options.locale;
            }
            runeListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.runes + runeListUrl, authKey);
        return util.makeRequest(url, 'Error getting rune list : ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getRuneById = function(id, options, regionOrFunction, callback) {
        var runeListUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                runeListUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                runeListUrl += '&version=' + options.version;
            }

            if (options.locale) {
                runeListUrl += '&locale=' + options.locale;
            }
            runeListUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.runes + "/" + id + runeListUrl, authKey);
        return util.makeRequest(url, 'Error getting rune by id : ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getSummonerSpellList = function(options, regionOrFunction, callback) {
        var summonerSpellUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                summonerSpellUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                summonerSpellUrl += '&version=' + options.version;
            }

            if (options.locale) {
                summonerSpellUrl += '&locale=' + options.locale;
            }

            if (options.dataById) {
                summonerSpellUrl += '&dataById=' + options.dataById;
            }
            summonerSpellUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.spells + summonerSpellUrl, authKey);
        return util.makeRequest(url, 'Error getting summoner spell list : ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getSummonerSpellById = function(id, options, regionOrFunction, callback) {
        var summonerSpellUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.tags) {
                summonerSpellUrl += '&tags=' + options.tags;
            }

            if (options.version) {
                summonerSpellUrl += '&version=' + options.version;
            }

            if (options.locale) {
                summonerSpellUrl += '&locale=' + options.locale;
            }

            summonerSpellUrl += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.spells + "/" + id + summonerSpellUrl, authKey);
        return util.makeRequest(url, 'Error getting summoner spell by id : ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Static.getVersions = function(regionOrFunction, callback) {        
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, staticUrl.versions + "?", authKey);
        return util.makeRequest(url, 'Error getting versions: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Status.getShards = function(regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, statusUrl + '?', authKey);
        return util.makeRequest(url, 'Error getting shards: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Masteries.getMasteries = function (summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, masteriesUrl + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting mastery data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Match.getMatch = function(matchId, options, regionOrFunction, callback) {
        var getMatchUrl = '?',
            regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback);
        if (options) {
            if (options.forAccountId) {
                getMatchUrl += '&forAccountId=' + options.forAccountId + '&';
            }
        }

        var url = util.craftUrl(endpoint, regionAndFunc.region, matchUrl.matches + matchId + getMatchUrl, authKey);
        return util.makeRequest(url, 'Error getting match: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Match.getMatchLists = function(accountId, options, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            historyOptions = '?';
        if(options) {
            if (options.queue) {
                if(options.queue.length > 1) {
                    for(let queue of options.queue) {
                        historyOptions += '&queue=' + queue;
                    }
                } else {
                    historyOptions += '&queue=' + options.queue;
                }                
            }
            if (options.beginTime) {
                historyOptions += '&beginTime=' + options.beginTime;
            }
            if (options.endIndex) {
                historyOptions += '&endIndex=' + options.endIndex;
            }
            if (options.season) {
                historyOptions += '&season=' + options.season;
            }
            if (options.champion) {
                historyOptions += '&champion=' + options.champion;
            }
            if (options.beginIndex) {
                historyOptions += '&beginIndex=' + options.beginIndex;
            }           
            if (options.endTime) {
                historyOptions += '&endTime=' + options.endTime;
            }
            historyOptions += '&';
        }
        var url = util.craftUrl(endpoint, regionAndFunc.region, matchUrl.matchlists + accountId + historyOptions, authKey);
        return util.makeRequest(url, 'Error getting match history: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Match.getMatchListsRecent = function(accountId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, matchUrl.matchlists + accountId + "/recent?", authKey);
        return util.makeRequest(url, 'Error getting matchlists recent: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Match.getTimelines = function(matchId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, matchUrl.timelines + matchId + "?", authKey);
        return util.makeRequest(url, 'Error getting matchlists recent: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Match.getMatchIdsByTournament = function(tournamentCode, regionOrFunction, callback) {       
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, matchUrl.tournament + tournamentCode + '/ids?', authKey);
        return util.makeRequest(url, 'Error getting tournament match ids: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Match.getMatchForTournament = function(matchId, tournamentCode, regionOrFunction, callback) {        
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, matchUrl.matches + matchId + '/by-tournament-code/' + tournamentCode + '?', authKey);
        return util.makeRequest(url, 'Error getting tournament match: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Runes.getRunes = function (summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, runesUrl + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting rune data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Spectator.getCurrentGame = function(summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, spectatorUrl.activegames + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting current game: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Spectator.getFeaturedGames = function(regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, spectatorUrl.featuredgames + '?', authKey);
                
        return util.makeRequest(url, 'Error getting current game: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Summoner.getByAccountID = function (accountId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, summonerUrl.account + accountId + '?', authKey);
        return util.makeRequest(url, 'Error getting summoner data: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Summoner.getByName = function (name, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url;

        name = encodeURIComponent(name.split(' ').join(''));
        url = util.craftUrl(endpoint, regionAndFunc.region, summonerUrl.name + name + '?', authKey);
        return util.makeRequest(url, 'Error getting summoner data using name: ', null, regionAndFunc.callback);
    };

    // UPDATED VERSION V3
    League.Summoner.getByID = function (summonerId, regionOrFunction, callback) {
        var regionAndFunc = util.getCallbackAndRegion(regionOrFunction, region, callback),
            url = util.craftUrl(endpoint, regionAndFunc.region, summonerUrl.summoner + summonerId + '?', authKey);
        return util.makeRequest(url, 'Error getting summoner data: ', null, regionAndFunc.callback);
    };

    // RATE LIMIT
    League.setRateLimit  = function (limitPer10s, limitPer10min) {
        util.setRateLimit(limitPer10s, limitPer10min);
    };

    // UPDATED VERSION V3
    League.TournamentStub.createCode = function(tournamentId, count, options, callback) {
        if(count > 1000)
            count = 1000;

        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentStubUrl.codes + '?tournamentId=' + tournamentId + '&count=' + count + '&', authKey);
        
        var bodyData = {};
        if (typeof options.spectatorType != 'undefined') bodyData.spectatorType = options.spectatorType;
        if (typeof options.teamSize != 'undefined') bodyData.teamSize = options.teamSize;
        if (typeof options.pickType != 'undefined') bodyData.pickType = options.pickType;
        if (typeof options.allowedSummonerIds != 'undefined')  bodyData.allowedSummonerIds = {participants: options.allowedSummonerIds};
        if (typeof options.mapType != 'undefined') bodyData.mapType = options.mapType;
        if (typeof options.metadata != 'undefined') bodyData.metadata = options.metadata;
        
        return util.makeCustomRequest(url, 'POST', bodyData, 'Error creating tournament code: ', null, callback);
    };

    // UPDATED VERSION V3
    League.TournamentStub.getLobbyEventsByCode = function(tournamentCode, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentStubUrl.lobbyevents + tournamentCode + '?', authKey);

        return util.makeRequest(url, 'Error getting lobby events: ', null, callback);
    };
    
    // UPDATED VERSION V3
    League.TournamentStub.createProvider = function(region, callbackUrl, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentStubUrl.providers + '?', authKey);

        return util.makeCustomRequest(url, 'POST', { region: region, url: callbackUrl }, 'Error creating tournament provider: ', null, callback);
    };

    // UPDATED VERSION V3
    League.TournamentStub.createTournament = function(name, providerId, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentStubUrl.tournaments + '?', authKey);
        
        return util.makeCustomRequest(url, 'POST', { name: name, providerId: providerId }, 'Error creating tournament: ', null, callback);
    };

    // UPDATED VERSION V3
    League.Tournament.createCode = function(tournamentId, count, options, callback) {
        if(count > 1000)
            count = 1000;

        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentUrl.codes + '?tournamentId=' + tournamentId + '&count=' + count + '&', authKey);
        
        var bodyData = {};
        if (typeof options.spectatorType != 'undefined') bodyData.spectatorType = options.spectatorType;
        if (typeof options.teamSize != 'undefined') bodyData.teamSize = options.teamSize;
        if (typeof options.pickType != 'undefined') bodyData.pickType = options.pickType;
        if (typeof options.allowedSummonerIds != 'undefined')  bodyData.allowedSummonerIds = {participants: options.allowedSummonerIds};
        if (typeof options.mapType != 'undefined') bodyData.mapType = options.mapType;
        if (typeof options.metadata != 'undefined') bodyData.metadata = options.metadata;
        
        return util.makeCustomRequest(url, 'POST', bodyData, 'Error creating tournament code: ', null, callback);
    };

    // UPDATED VERSION V3
    League.Tournament.updateCode = function(tournamentCode, options, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentUrl.codes + '/' + tournamentCode + '?', authKey);

        var bodyData = {};
        if (typeof options.allowedParticipants != 'undefined') bodyData.allowedParticipants = options.allowedParticipants.join(',');
        if (typeof options.spectatorType != 'undefined') bodyData.spectatorType = options.spectatorType;
        if (typeof options.pickType != 'undefined') bodyData.pickType = options.pickType;
        if (typeof options.mapType != 'undefined') bodyData.mapType = options.mapType;

        return util.makeCustomRequest(url, 'PUT', bodyData, 'Error updating tournament code: ', null, callback);
    };

    // UPDATED VERSION V3
    League.Tournament.getTournamentByCode = function(tournamentCode, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentUrl.codes + '/' + tournamentCode + '?', authKey);

        return util.makeRequest(url, 'Error getting tournament by code: ', null, callback);
    };

    // UPDATED VERSION V3
    League.Tournament.getLobbyEventsByCode = function(tournamentCode, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentUrl.lobbyevents + tournamentCode + '?', authKey);

        return util.makeRequest(url, 'Error getting lobby events: ', null, callback);
    };

    // UPDATED VERSION V3
    League.Tournament.createProvider = function(region, callbackUrl, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentUrl.providers + '?', authKey);

        return util.makeCustomRequest(url, 'POST', { region: region, url: callbackUrl }, 'Error creating tournament provider: ', null, callback);
    };

    // UPDATED VERSION V3
    League.Tournament.createTournament = function(name, providerId, callback) {
        var url = util.craftUrl(endpoint, regionAndFunc.region, tournamentUrl.tournaments + '?', authKey);
        
        return util.makeCustomRequest(url, 'POST', { name: name, providerId: providerId }, 'Error creating tournament: ', null, callback);
    };

    module.exports = League;
}());
